# graysclae化
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
ret, gray = cv2.threshold(gray, 220, 255, cv2.THRESH_BINARY)

# 白黒反転
gray_bit = cv2.bitwise_not(gray)

# ハフ変換
lines = cv2.HoughLinesP(gray_bit, rho=1, theta=np.pi / 360 * 2, threshold=100, minLineLength=100, maxLineGap=5)

# 線を引く
x1, y1, x2, y2 = lines[0][0]
img = cv2.line(img, (x1,y1), (x2,y2),(0,0, 255),3)

# 2値化して平行移動
ret, cell_img_bit = cv2.threshold(cell_img, 200, 255, cv2.THRESH_BINARY)
contours, hierarchy = cv2.findContours(cell_img_bit, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

cnt = contours[0]
x,y,w,h = cv2.boundingRect(cnt)
img = cv2.rectangle(cell_img,(x,y),(x+w,y+h),(255),1)

move_x = int((255/2) - (x + w/2))
move_y = int((255/2) - (y + h/2))

width = 255
height = 255
M = np.float32([[1, 0, move_x], [0, 1, move_y]])
shifted_img = cv2.warpAffine(img, M, (width, height))

# imreadで読み込み
cv2.imread(filename, cv2.IMREAD_GRAYSCALE)


# Grayscaleをカラーに
img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)


# ある値で埋める
img = cv2.copyMakeBorder(img, top = 3, bottom = 3, left = 3, right = 3, borderType = cv2.BORDER_CONSTANT, value = 0)

# opening処理
kernel = np.ones(kernel_size, np.uint8)
# img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
img = cv2.dilate(img, kernel, iterations = 1)
img = cv2.erode(img, kernel, iterations = 1)

# resize
(アス比を保つ時)
image = image_resize(image, height = 800)

(アス比を無視する時)
# (255, 255)にリサイズ
img = cv2.resize(img, (255,255))

# アスペクト比を保ってリサイズする
def resize(src_img, target_size):
    """
    画像ファイルを与えられたサイズにサイズ変換する関数
    アス比は固定、左上に寄せる、余った部分はゼロで埋める

    Returns
    ------------------
    dst_img : resized image
    """
    
    h, w = src_img.shape
    # dst_img = cv2.resize(src_img, dsize=(width, height))

    # アス比固定, padding
    scale_w = target_size / w
    scale_h = target_size / h

    if scale_w > 1 or sclae_h > 1:
        print("either width or height is more than 255")
    
    if(scale_w < scale_h):
        resize_img = cv2.resize(src_img, dsize=None, fx=scale_w, fy=scale_w, interpolation = cv2.INTER_AREA)
        ret_scale = scale_w
        print("w {} times".format(ret_scale))
    else:
        resize_img = cv2.resize(src_img, dsize=None, fx=scale_h, fy=scale_h, interpolation = cv2.INTER_AREA)
        ret_scale = scale_h
        print("h {} times".format(ret_scale))

    # dst_img 生成
    dst_img = np.zeros((target_size, target_size), dtype = np.uint8)

    # dst_imgにresize_imgを合成
    top = 0
    left = 0
    #dst_img[top:height + top, left:width + left] = resize_img
    h, w = resize_img.shape
    dst_img[0:h, 0:w] = resize_img

    return dst_img
