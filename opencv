# ある値で埋める
img = cv2.copyMakeBorder(img, top = 3, bottom = 3, left = 3, right = 3, borderType = cv2.BORDER_CONSTANT, value = 0)

# opening処理
kernel = np.ones(kernel_size, np.uint8)
# img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
img = cv2.dilate(img, kernel, iterations = 1)
img = cv2.erode(img, kernel, iterations = 1)

# resize
(アス比を保つ時)
image = image_resize(image, height = 800)

(アス比を無視する時)
# (255, 255)にリサイズ
img = cv2.resize(img, (255,255))

# Grayscaleをカラーに
img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)

# アスペクト比を保ってリサイズする
def resize(src_file, dst_file, width, height):
"""
画像ファイルを与えられたサイズにサイズ変換する関数
アス比は固定、左上に寄せる、余った部分はゼロで埋める

Returns
-------
ret_scale : float
拡大/縮小した倍率
"""

src_img = cv2.imread(src_file)
h, w, c = src_img.shape
# dst_img = cv2.resize(src_img, dsize=(width, height))

# アス比固定, padding
scale_w = width / w
scale_h = height / h

ret_scale = 1.0
# Down Convert
if(scale_w < 1.0 or scale_h < 1.0):
if(scale_w < scale_h): 
resize_img = cv2.resize(src_img, dsize=None, fx=scale_w, fy=scale_w, interpolation = cv2.INTER_AREA)
ret_scale = scale_w
else:
resize_img = cv2.resize(src_img, dsize=None, fx=scale_h, fy=scale_h, interpolation = cv2.INTER_AREA)
ret_scale = scale_h
else:
resize_img = src_img

# dst_img 生成
dst_img = np.zeros((height, width, 3), dtype = np.uint8)

# dst_imgにresize_imgを合成
top = 0
left = 0
#dst_img[top:height + top, left:width + left] = resize_img
h, w, c = resize_img.shape
dst_img[0:h, 0:w] = resize_img

cv2.imwrite(dst_file, dst_img)

return ret_scale
