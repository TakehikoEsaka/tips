# pip error
-> pip install --upgrade pip setuptools

# 文字列操作
https://qiita.com/Kenta-Han/items/e64035e9c3e4ef08e394#%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%89%8A%E9%99%A4

# ファイル名操作
https://note.nkmk.me/python-os-basename-dirname-split-splitext/

# autoreload
%load_ext autoreload
autoreload

# map関数の引数に取れるのイテレーターオブジェクト
https://qiita.com/conf8o/items/0cb02bc504b51af09099

# リスト内の各要素に対して操作をしたい時

mapかリスト内包表記を使うと良い

```
def matmul(x, y):
    return x*y
test1 = [1,2,3,4,5]
test2 = [3,4,5,6,7]
test_result = map(matmul, test1, test2)
print(list(test_result)) # [3,8,15,24,35]
```

```
def matmul(x, y):
    return x*y

test1 = [1,2,3,4,5]
test2 = [3,4,5,6,7]
test_result = [matmul(k, d) for k,d in zip(test1, test2)]
print(test_result) # [3,8,15,24,35]
```

# 指定した値が入った文字列と一致する値が対象リストに入っていたらto_fine_tuneにappendする文
# Select variables in top layers to fine-tune.
trainable_variables = detection_model.trainable_variables
to_fine_tune = []
prefixes_to_train = [
  'WeightSharedConvolutionalBoxPredictor/WeightSharedConvolutionalBoxHead',
  'WeightSharedConvolutionalBoxPredictor/WeightSharedConvolutionalClassHead']
for var in trainable_variables:
  if any([var.name.startswith(prefix) for prefix in prefixes_to_train]):
    to_fine_tune.append(var)


# xmlからdfに変換する操作
def xml_to_labels(annotation_file):
    with open(annotation_file) as f:
        xml_data = f.read()  # xmlファイルの内容を読み込む

    # xml操作
    root = ET.XML(xml_data)
    obj_to_int = lambda x: int(x.text)
    df_annotations = pd.DataFrame(columns=['xmin', 'ymin', 'xmax', 'ymax', 'width', 'height', 'class_label'])
    for i, child in enumerate(root):
        if child.tag == 'filename':
            img_filename = child.text
        if child.tag == 'size':
            for subchild in child:
                if subchild.tag == 'width':
                    width = int(subchild.text)
                if subchild.tag == 'height':
                    height = int(subchild.text)
        if child.tag == 'object':
            # 各objectにname,bndboxタグが必ず1つのみついていることを想定して値を読み取る
            for subchild in child:
                if subchild.tag == 'name':
                    label = subchild.text
                if subchild.tag == 'bndbox':
                    xmin, ymin, xmax, ymax = tuple(map(obj_to_int, subchild.getchildren()))
            # BBOXの幅と高さを計算
            #w = xmax - xmin
            #h = ymax - ymin
            # DFに追加
            df_annotations = df_annotations.append(
                {'xmin': xmin, 'ymin': ymin, 'xmax': xmax, 'ymax': ymax, 'width': width, 'height': height, 'class_label': label},
                ignore_index=True
            )
    return img_filename, df_annotations
